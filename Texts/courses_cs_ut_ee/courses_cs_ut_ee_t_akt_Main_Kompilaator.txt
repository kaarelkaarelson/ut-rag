Automaadid, keeled ja translaatorid - Kursused - Arvutiteaduse instituut Esileht Automaadid, keeled ja translaatorid EN Logi sisse Automaadid, keeled ja translaatorid Üldinfo Ajakava Eksami näidised Teemad 1. Soojendus 2. Regulaaravaldised 3. Automaadid 4. Avaldise struktuur 5. Grammatikad ja lekser 6. Käsitsi parsimine 7. ANTLRiga töötamine 8. Interpretaator 9. Kompilaator Vam: CMa simulaator Eksami lõviosa! Kodutöö: Analüüs Kodutöö: Kompilaator 10. Edasi! Süvendus GitHub Moodle Zulip Zoom 9. Kompilaator Me tahame nüüd Java baitkoodi genereerida. Selleks peab aga kõigepealt programmi analüüsima, muidu läheb koodi genereerimine väga raskeks. Töötava kompilaatori jõudmiseni on meil jäänud järgmised kaks kodutööd: Semantiline analüüs . Muutujate skoopidega seotud probleemide lahendamiseks seome muutujate kasutused nende definitsioonidega. Teostame ka tüübikontroll, et tüübivigu avastada kompileerimise ajal. Baitkoodi genereerimine . Kasutame ASM teeki, et genereerida Java baitkoodi. Sellega on AKT keele kompilaator valmis. Java baitkood on magasin-põhise abstraktse masina kood. Selle koodi genereerimise põhimõtet on palju mugavam õppida lihtsustatud abstraktse masina CMa põhjal, mida saab visualiseerida töövahendiga Vam. Kui me eksami lõviosas kirjutame kompilaatori, siis me ei hakka Java baitkoodi genereerima, vaid genereerime hoopis CMa koodi. CMa simuleerimine . Kõigepealt vaatame, kuidas saab CMa koodi täitmist visualiseerida töövahendiga Vam. Veel tähtsam on aga tutvuda meie enda CMa koodi genereerimise ja testimise raamistikuga, sest eksami lõviosas on vaja seda kasutada. Lõviosa harjutamiseks vaatame koodi genereerimise osad üle meie vanade heade näidiskeelte peal. Sellega on meil siis kompilaator valmis: meie enda pisike javac moodi tööriist, mis teisendab AKT keele programme Java baitkoodiks, mida Java virtuaalmasin oskab interpreteerida. See on muidugi väga vinge, kui said sellise asja lõpuks tööle! Meie kursuse põhieesmärk on aga nendest põhimõttetest aru saada, kuidas programme täidetakse. Baitkoodi juures on samamoodi olulisem aru saada magasinpõhise masina ideest ja imetleda koodi genereerimise ilusat kompositsionaalset skeemi: kompilaator on struktuuri poolest samasugune AST visitor nagu interpretaator. Arvutiteaduse instituut Loodus- ja täppisteaduste valdkond Tartu Ülikool Tehniliste probleemide või küsimuste korral kirjuta: Kursuse sisu ja korralduslike küsimustega pöörduge kursuse korraldajate poole. Õppematerjalide varalised autoriõigused kuuluvad Tartu Ülikoolile. Õppematerjalide kasutamine on lubatud autoriõiguse seaduses ettenähtud teose vaba kasutamise eesmärkidel ja tingimustel. Õppematerjalide kasutamisel on kasutaja kohustatud viitama õppematerjalide autorile. Õppematerjalide kasutamine muudel eesmärkidel on lubatud ainult Tartu Ülikooli eelneval kirjalikul nõusolekul. Courses’i keskkonna kasutustingimused